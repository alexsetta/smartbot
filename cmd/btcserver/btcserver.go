package main

import (
	"crypto/tls"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"text/template"
	"time"

	"github.com/alexsetta/smartbot/tipos"
	"github.com/gorilla/mux"
)

// Generated by https://quicktype.io
type Page struct {
	Result string
}

var (
	client = &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
	}
	templates *template.Template
	porta     string
	hora      = time.Now().Add(time.Hour * -5)
	alerta    = tipos.Alertas{hora, hora, hora, hora, hora, hora}
	carteira  = tipos.Carteira{}
	config    = tipos.Config{}
	start     = time.Now()
)

func main() {
	porta = "8081"
	if len(os.Args) == 2 {
		porta = os.Args[1]
	}
	templates = template.Must(template.ParseFiles("./templates/result.html"))

	router := mux.NewRouter().StrictSlash(true)
	router.HandleFunc("/", Index)
	router.HandleFunc("/ticker/{id}", Ticker)
	router.HandleFunc("/total/", Total)
	router.HandleFunc("/order/{from}/{to}", Order)

	fmt.Println("Listen port " + porta)
	log.Fatal(http.ListenAndServe(":"+porta, router))
}

func Index(w http.ResponseWriter, r *http.Request) {
	_, _ = fmt.Fprintln(w, "btcserver online\nstart time: ", time.Since(start))
}

func body(url string) (string, error) {
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return "", fmt.Errorf("body: %w", err)
	}
	res, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("body: %w", err)
	}
	defer res.Body.Close()
	b, err := io.ReadAll(res.Body)
	if err != nil {
		return "", fmt.Errorf("body: %w", err)
	}
	return string(b), nil
}
